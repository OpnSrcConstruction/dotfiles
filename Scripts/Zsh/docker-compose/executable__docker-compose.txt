{"payload":{"allShortcutsEnabled":true,"fileTree":{"plugins/docker-compose":{"items":[{"name":"README.md","path":"plugins/docker-compose/README.md","contentType":"file"},{"name":"_docker-compose","path":"plugins/docker-compose/_docker-compose","contentType":"file"},{"name":"docker-compose.plugin.zsh","path":"plugins/docker-compose/docker-compose.plugin.zsh","contentType":"file"}],"totalCount":3},"plugins":{"items":[{"name":"1password","path":"plugins/1password","contentType":"directory"},{"name":"adb","path":"plugins/adb","contentType":"directory"},{"name":"ag","path":"plugins/ag","contentType":"directory"},{"name":"alias-finder","path":"plugins/alias-finder","contentType":"directory"},{"name":"aliases","path":"plugins/aliases","contentType":"directory"},{"name":"ansible","path":"plugins/ansible","contentType":"directory"},{"name":"ant","path":"plugins/ant","contentType":"directory"},{"name":"apache2-macports","path":"plugins/apache2-macports","contentType":"directory"},{"name":"arcanist","path":"plugins/arcanist","contentType":"directory"},{"name":"archlinux","path":"plugins/archlinux","contentType":"directory"},{"name":"argocd","path":"plugins/argocd","contentType":"directory"},{"name":"asdf","path":"plugins/asdf","contentType":"directory"},{"name":"autoenv","path":"plugins/autoenv","contentType":"directory"},{"name":"autojump","path":"plugins/autojump","contentType":"directory"},{"name":"autopep8","path":"plugins/autopep8","contentType":"directory"},{"name":"aws","path":"plugins/aws","contentType":"directory"},{"name":"azure","path":"plugins/azure","contentType":"directory"},{"name":"battery","path":"plugins/battery","contentType":"directory"},{"name":"bazel","path":"plugins/bazel","contentType":"directory"},{"name":"bbedit","path":"plugins/bbedit","contentType":"directory"},{"name":"bedtools","path":"plugins/bedtools","contentType":"directory"},{"name":"bgnotify","path":"plugins/bgnotify","contentType":"directory"},{"name":"bower","path":"plugins/bower","contentType":"directory"},{"name":"branch","path":"plugins/branch","contentType":"directory"},{"name":"brew","path":"plugins/brew","contentType":"directory"},{"name":"bridgetown","path":"plugins/bridgetown","contentType":"directory"},{"name":"bundler","path":"plugins/bundler","contentType":"directory"},{"name":"cabal","path":"plugins/cabal","contentType":"directory"},{"name":"cake","path":"plugins/cake","contentType":"directory"},{"name":"cakephp3","path":"plugins/cakephp3","contentType":"directory"},{"name":"capistrano","path":"plugins/capistrano","contentType":"directory"},{"name":"cask","path":"plugins/cask","contentType":"directory"},{"name":"catimg","path":"plugins/catimg","contentType":"directory"},{"name":"celery","path":"plugins/celery","contentType":"directory"},{"name":"charm","path":"plugins/charm","contentType":"directory"},{"name":"chruby","path":"plugins/chruby","contentType":"directory"},{"name":"chucknorris","path":"plugins/chucknorris","contentType":"directory"},{"name":"cloudfoundry","path":"plugins/cloudfoundry","contentType":"directory"},{"name":"codeclimate","path":"plugins/codeclimate","contentType":"directory"},{"name":"coffee","path":"plugins/coffee","contentType":"directory"},{"name":"colemak","path":"plugins/colemak","contentType":"directory"},{"name":"colored-man-pages","path":"plugins/colored-man-pages","contentType":"directory"},{"name":"colorize","path":"plugins/colorize","contentType":"directory"},{"name":"command-not-found","path":"plugins/command-not-found","contentType":"directory"},{"name":"common-aliases","path":"plugins/common-aliases","contentType":"directory"},{"name":"compleat","path":"plugins/compleat","contentType":"directory"},{"name":"composer","path":"plugins/composer","contentType":"directory"},{"name":"copybuffer","path":"plugins/copybuffer","contentType":"directory"},{"name":"copyfile","path":"plugins/copyfile","contentType":"directory"},{"name":"copypath","path":"plugins/copypath","contentType":"directory"},{"name":"cp","path":"plugins/cp","contentType":"directory"},{"name":"cpanm","path":"plugins/cpanm","contentType":"directory"},{"name":"dash","path":"plugins/dash","contentType":"directory"},{"name":"dbt","path":"plugins/dbt","contentType":"directory"},{"name":"debian","path":"plugins/debian","contentType":"directory"},{"name":"deno","path":"plugins/deno","contentType":"directory"},{"name":"dircycle","path":"plugins/dircycle","contentType":"directory"},{"name":"direnv","path":"plugins/direnv","contentType":"directory"},{"name":"dirhistory","path":"plugins/dirhistory","contentType":"directory"},{"name":"dirpersist","path":"plugins/dirpersist","contentType":"directory"},{"name":"dnf","path":"plugins/dnf","contentType":"directory"},{"name":"dnote","path":"plugins/dnote","contentType":"directory"},{"name":"docker-compose","path":"plugins/docker-compose","contentType":"directory"},{"name":"docker-machine","path":"plugins/docker-machine","contentType":"directory"},{"name":"docker","path":"plugins/docker","contentType":"directory"},{"name":"doctl","path":"plugins/doctl","contentType":"directory"},{"name":"dotenv","path":"plugins/dotenv","contentType":"directory"},{"name":"dotnet","path":"plugins/dotnet","contentType":"directory"},{"name":"droplr","path":"plugins/droplr","contentType":"directory"},{"name":"drush","path":"plugins/drush","contentType":"directory"},{"name":"eecms","path":"plugins/eecms","contentType":"directory"},{"name":"emacs","path":"plugins/emacs","contentType":"directory"},{"name":"ember-cli","path":"plugins/ember-cli","contentType":"directory"},{"name":"emoji-clock","path":"plugins/emoji-clock","contentType":"directory"},{"name":"emoji","path":"plugins/emoji","contentType":"directory"},{"name":"emotty","path":"plugins/emotty","contentType":"directory"},{"name":"encode64","path":"plugins/encode64","contentType":"directory"},{"name":"extract","path":"plugins/extract","contentType":"directory"},{"name":"fabric","path":"plugins/fabric","contentType":"directory"},{"name":"fancy-ctrl-z","path":"plugins/fancy-ctrl-z","contentType":"directory"},{"name":"fasd","path":"plugins/fasd","contentType":"directory"},{"name":"fastfile","path":"plugins/fastfile","contentType":"directory"},{"name":"fbterm","path":"plugins/fbterm","contentType":"directory"},{"name":"fd","path":"plugins/fd","contentType":"directory"},{"name":"fig","path":"plugins/fig","contentType":"directory"},{"name":"firewalld","path":"plugins/firewalld","contentType":"directory"},{"name":"flutter","path":"plugins/flutter","contentType":"directory"},{"name":"fluxcd","path":"plugins/fluxcd","contentType":"directory"},{"name":"fnm","path":"plugins/fnm","contentType":"directory"},{"name":"forklift","path":"plugins/forklift","contentType":"directory"},{"name":"fossil","path":"plugins/fossil","contentType":"directory"},{"name":"frontend-search","path":"plugins/frontend-search","contentType":"directory"},{"name":"fzf","path":"plugins/fzf","contentType":"directory"},{"name":"gas","path":"plugins/gas","contentType":"directory"},{"name":"gatsby","path":"plugins/gatsby","contentType":"directory"},{"name":"gcloud","path":"plugins/gcloud","contentType":"directory"},{"name":"geeknote","path":"plugins/geeknote","contentType":"directory"},{"name":"gem","path":"plugins/gem","contentType":"directory"},{"name":"genpass","path":"plugins/genpass","contentType":"directory"},{"name":"gh","path":"plugins/gh","contentType":"directory"},{"name":"git-auto-fetch","path":"plugins/git-auto-fetch","contentType":"directory"},{"name":"git-escape-magic","path":"plugins/git-escape-magic","contentType":"directory"},{"name":"git-extras","path":"plugins/git-extras","contentType":"directory"},{"name":"git-flow-avh","path":"plugins/git-flow-avh","contentType":"directory"},{"name":"git-flow","path":"plugins/git-flow","contentType":"directory"},{"name":"git-hubflow","path":"plugins/git-hubflow","contentType":"directory"},{"name":"git-lfs","path":"plugins/git-lfs","contentType":"directory"},{"name":"git-prompt","path":"plugins/git-prompt","contentType":"directory"},{"name":"git","path":"plugins/git","contentType":"directory"},{"name":"gitfast","path":"plugins/gitfast","contentType":"directory"},{"name":"github","path":"plugins/github","contentType":"directory"},{"name":"gitignore","path":"plugins/gitignore","contentType":"directory"},{"name":"glassfish","path":"plugins/glassfish","contentType":"directory"},{"name":"globalias","path":"plugins/globalias","contentType":"directory"},{"name":"gnu-utils","path":"plugins/gnu-utils","contentType":"directory"},{"name":"golang","path":"plugins/golang","contentType":"directory"},{"name":"gpg-agent","path":"plugins/gpg-agent","contentType":"directory"},{"name":"gradle","path":"plugins/gradle","contentType":"directory"},{"name":"grails","path":"plugins/grails","contentType":"directory"},{"name":"grc","path":"plugins/grc","contentType":"directory"},{"name":"grunt","path":"plugins/grunt","contentType":"directory"},{"name":"gulp","path":"plugins/gulp","contentType":"directory"},{"name":"hanami","path":"plugins/hanami","contentType":"directory"},{"name":"hasura","path":"plugins/hasura","contentType":"directory"},{"name":"helm","path":"plugins/helm","contentType":"directory"},{"name":"heroku-alias","path":"plugins/heroku-alias","contentType":"directory"},{"name":"heroku","path":"plugins/heroku","contentType":"directory"},{"name":"history-substring-search","path":"plugins/history-substring-search","contentType":"directory"},{"name":"history","path":"plugins/history","contentType":"directory"},{"name":"hitchhiker","path":"plugins/hitchhiker","contentType":"directory"},{"name":"hitokoto","path":"plugins/hitokoto","contentType":"directory"},{"name":"homestead","path":"plugins/homestead","contentType":"directory"},{"name":"httpie","path":"plugins/httpie","contentType":"directory"},{"name":"invoke","path":"plugins/invoke","contentType":"directory"},{"name":"ionic","path":"plugins/ionic","contentType":"directory"},{"name":"ipfs","path":"plugins/ipfs","contentType":"directory"},{"name":"isodate","path":"plugins/isodate","contentType":"directory"},{"name":"istioctl","path":"plugins/istioctl","contentType":"directory"},{"name":"iterm2","path":"plugins/iterm2","contentType":"directory"},{"name":"jake-node","path":"plugins/jake-node","contentType":"directory"},{"name":"jenv","path":"plugins/jenv","contentType":"directory"},{"name":"jfrog","path":"plugins/jfrog","contentType":"directory"},{"name":"jhbuild","path":"plugins/jhbuild","contentType":"directory"},{"name":"jira","path":"plugins/jira","contentType":"directory"},{"name":"jruby","path":"plugins/jruby","contentType":"directory"},{"name":"jsontools","path":"plugins/jsontools","contentType":"directory"},{"name":"juju","path":"plugins/juju","contentType":"directory"},{"name":"jump","path":"plugins/jump","contentType":"directory"},{"name":"kate","path":"plugins/kate","contentType":"directory"},{"name":"keychain","path":"plugins/keychain","contentType":"directory"},{"name":"kitchen","path":"plugins/kitchen","contentType":"directory"},{"name":"kn","path":"plugins/kn","contentType":"directory"},{"name":"knife","path":"plugins/knife","contentType":"directory"},{"name":"knife_ssh","path":"plugins/knife_ssh","contentType":"directory"},{"name":"kops","path":"plugins/kops","contentType":"directory"},{"name":"kube-ps1","path":"plugins/kube-ps1","contentType":"directory"},{"name":"kubectl","path":"plugins/kubectl","contentType":"directory"},{"name":"kubectx","path":"plugins/kubectx","contentType":"directory"},{"name":"lando","path":"plugins/lando","contentType":"directory"},{"name":"laravel","path":"plugins/laravel","contentType":"directory"},{"name":"laravel4","path":"plugins/laravel4","contentType":"directory"},{"name":"laravel5","path":"plugins/laravel5","contentType":"directory"},{"name":"last-working-dir","path":"plugins/last-working-dir","contentType":"directory"},{"name":"lein","path":"plugins/lein","contentType":"directory"},{"name":"lighthouse","path":"plugins/lighthouse","contentType":"directory"},{"name":"lol","path":"plugins/lol","contentType":"directory"},{"name":"lpass","path":"plugins/lpass","contentType":"directory"},{"name":"lxd","path":"plugins/lxd","contentType":"directory"},{"name":"macos","path":"plugins/macos","contentType":"directory"},{"name":"macports","path":"plugins/macports","contentType":"directory"},{"name":"magic-enter","path":"plugins/magic-enter","contentType":"directory"},{"name":"man","path":"plugins/man","contentType":"directory"},{"name":"marked2","path":"plugins/marked2","contentType":"directory"},{"name":"marktext","path":"plugins/marktext","contentType":"directory"},{"name":"mercurial","path":"plugins/mercurial","contentType":"directory"},{"name":"meteor","path":"plugins/meteor","contentType":"directory"},{"name":"microk8s","path":"plugins/microk8s","contentType":"directory"},{"name":"minikube","path":"plugins/minikube","contentType":"directory"},{"name":"mix-fast","path":"plugins/mix-fast","contentType":"directory"},{"name":"mix","path":"plugins/mix","contentType":"directory"},{"name":"mongo-atlas","path":"plugins/mongo-atlas","contentType":"directory"},{"name":"mongocli","path":"plugins/mongocli","contentType":"directory"},{"name":"mosh","path":"plugins/mosh","contentType":"directory"},{"name":"multipass","path":"plugins/multipass","contentType":"directory"},{"name":"mvn","path":"plugins/mvn","contentType":"directory"},{"name":"mysql-macports","path":"plugins/mysql-macports","contentType":"directory"},{"name":"n98-magerun","path":"plugins/n98-magerun","contentType":"directory"},{"name":"nanoc","path":"plugins/nanoc","contentType":"directory"},{"name":"nats","path":"plugins/nats","contentType":"directory"},{"name":"ng","path":"plugins/ng","contentType":"directory"},{"name":"nmap","path":"plugins/nmap","contentType":"directory"},{"name":"node","path":"plugins/node","contentType":"directory"},{"name":"nodenv","path":"plugins/nodenv","contentType":"directory"},{"name":"nomad","path":"plugins/nomad","contentType":"directory"},{"name":"npm","path":"plugins/npm","contentType":"directory"},{"name":"nvm","path":"plugins/nvm","contentType":"directory"},{"name":"oc","path":"plugins/oc","contentType":"directory"},{"name":"octozen","path":"plugins/octozen","contentType":"directory"},{"name":"operator-sdk","path":"plugins/operator-sdk","contentType":"directory"},{"name":"otp","path":"plugins/otp","contentType":"directory"},{"name":"pass","path":"plugins/pass","contentType":"directory"},{"name":"paver","path":"plugins/paver","contentType":"directory"},{"name":"pep8","path":"plugins/pep8","contentType":"directory"},{"name":"per-directory-history","path":"plugins/per-directory-history","contentType":"directory"},{"name":"percol","path":"plugins/percol","contentType":"directory"},{"name":"perl","path":"plugins/perl","contentType":"directory"},{"name":"perms","path":"plugins/perms","contentType":"directory"},{"name":"phing","path":"plugins/phing","contentType":"directory"},{"name":"pip","path":"plugins/pip","contentType":"directory"},{"name":"pipenv","path":"plugins/pipenv","contentType":"directory"},{"name":"pj","path":"plugins/pj","contentType":"directory"},{"name":"please","path":"plugins/please","contentType":"directory"},{"name":"pm2","path":"plugins/pm2","contentType":"directory"},{"name":"pod","path":"plugins/pod","contentType":"directory"},{"name":"poetry","path":"plugins/poetry","contentType":"directory"},{"name":"postgres","path":"plugins/postgres","contentType":"directory"},{"name":"pow","path":"plugins/pow","contentType":"directory"},{"name":"powder","path":"plugins/powder","contentType":"directory"},{"name":"powify","path":"plugins/powify","contentType":"directory"},{"name":"pre-commit","path":"plugins/pre-commit","contentType":"directory"},{"name":"profiles","path":"plugins/profiles","contentType":"directory"},{"name":"pyenv","path":"plugins/pyenv","contentType":"directory"},{"name":"pylint","path":"plugins/pylint","contentType":"directory"},{"name":"python","path":"plugins/python","contentType":"directory"},{"name":"qrcode","path":"plugins/qrcode","contentType":"directory"},{"name":"rails","path":"plugins/rails","contentType":"directory"},{"name":"rake-fast","path":"plugins/rake-fast","contentType":"directory"},{"name":"rake","path":"plugins/rake","contentType":"directory"},{"name":"rand-quote","path":"plugins/rand-quote","contentType":"directory"},{"name":"rbenv","path":"plugins/rbenv","contentType":"directory"},{"name":"rbfu","path":"plugins/rbfu","contentType":"directory"},{"name":"rbw","path":"plugins/rbw","contentType":"directory"},{"name":"react-native","path":"plugins/react-native","contentType":"directory"},{"name":"rebar","path":"plugins/rebar","contentType":"directory"},{"name":"redis-cli","path":"plugins/redis-cli","contentType":"directory"},{"name":"repo","path":"plugins/repo","contentType":"directory"},{"name":"ripgrep","path":"plugins/ripgrep","contentType":"directory"},{"name":"ros","path":"plugins/ros","contentType":"directory"},{"name":"rsync","path":"plugins/rsync","contentType":"directory"},{"name":"ruby","path":"plugins/ruby","contentType":"directory"},{"name":"rust","path":"plugins/rust","contentType":"directory"},{"name":"rvm","path":"plugins/rvm","contentType":"directory"},{"name":"safe-paste","path":"plugins/safe-paste","contentType":"directory"},{"name":"salt","path":"plugins/salt","contentType":"directory"},{"name":"samtools","path":"plugins/samtools","contentType":"directory"},{"name":"sbt","path":"plugins/sbt","contentType":"directory"},{"name":"scala","path":"plugins/scala","contentType":"directory"},{"name":"scd","path":"plugins/scd","contentType":"directory"},{"name":"screen","path":"plugins/screen","contentType":"directory"},{"name":"scw","path":"plugins/scw","contentType":"directory"},{"name":"sdk","path":"plugins/sdk","contentType":"directory"},{"name":"sfdx","path":"plugins/sfdx","contentType":"directory"},{"name":"sfffe","path":"plugins/sfffe","contentType":"directory"},{"name":"shell-proxy","path":"plugins/shell-proxy","contentType":"directory"},{"name":"shrink-path","path":"plugins/shrink-path","contentType":"directory"},{"name":"sigstore","path":"plugins/sigstore","contentType":"directory"},{"name":"singlechar","path":"plugins/singlechar","contentType":"directory"},{"name":"skaffold","path":"plugins/skaffold","contentType":"directory"},{"name":"spring","path":"plugins/spring","contentType":"directory"},{"name":"sprunge","path":"plugins/sprunge","contentType":"directory"},{"name":"ssh-agent","path":"plugins/ssh-agent","contentType":"directory"},{"name":"stack","path":"plugins/stack","contentType":"directory"},{"name":"starship","path":"plugins/starship","contentType":"directory"},{"name":"sublime-merge","path":"plugins/sublime-merge","contentType":"directory"},{"name":"sublime","path":"plugins/sublime","contentType":"directory"},{"name":"sudo","path":"plugins/sudo","contentType":"directory"},{"name":"supervisor","path":"plugins/supervisor","contentType":"directory"},{"name":"suse","path":"plugins/suse","contentType":"directory"},{"name":"svcat","path":"plugins/svcat","contentType":"directory"},{"name":"svn-fast-info","path":"plugins/svn-fast-info","contentType":"directory"},{"name":"svn","path":"plugins/svn","contentType":"directory"},{"name":"swiftpm","path":"plugins/swiftpm","contentType":"directory"},{"name":"symfony","path":"plugins/symfony","contentType":"directory"},{"name":"symfony2","path":"plugins/symfony2","contentType":"directory"},{"name":"systemadmin","path":"plugins/systemadmin","contentType":"directory"},{"name":"systemd","path":"plugins/systemd","contentType":"directory"},{"name":"taskwarrior","path":"plugins/taskwarrior","contentType":"directory"},{"name":"term_tab","path":"plugins/term_tab","contentType":"directory"},{"name":"terminitor","path":"plugins/terminitor","contentType":"directory"},{"name":"terraform","path":"plugins/terraform","contentType":"directory"},{"name":"textastic","path":"plugins/textastic","contentType":"directory"},{"name":"textmate","path":"plugins/textmate","contentType":"directory"},{"name":"thefuck","path":"plugins/thefuck","contentType":"directory"},{"name":"themes","path":"plugins/themes","contentType":"directory"},{"name":"thor","path":"plugins/thor","contentType":"directory"},{"name":"tig","path":"plugins/tig","contentType":"directory"},{"name":"timer","path":"plugins/timer","contentType":"directory"},{"name":"tmux-cssh","path":"plugins/tmux-cssh","contentType":"directory"},{"name":"tmux","path":"plugins/tmux","contentType":"directory"},{"name":"tmuxinator","path":"plugins/tmuxinator","contentType":"directory"},{"name":"toolbox","path":"plugins/toolbox","contentType":"directory"},{"name":"torrent","path":"plugins/torrent","contentType":"directory"},{"name":"transfer","path":"plugins/transfer","contentType":"directory"},{"name":"tugboat","path":"plugins/tugboat","contentType":"directory"},{"name":"ubuntu","path":"plugins/ubuntu","contentType":"directory"},{"name":"ufw","path":"plugins/ufw","contentType":"directory"},{"name":"universalarchive","path":"plugins/universalarchive","contentType":"directory"},{"name":"urltools","path":"plugins/urltools","contentType":"directory"},{"name":"vagrant-prompt","path":"plugins/vagrant-prompt","contentType":"directory"},{"name":"vagrant","path":"plugins/vagrant","contentType":"directory"},{"name":"vault","path":"plugins/vault","contentType":"directory"},{"name":"vi-mode","path":"plugins/vi-mode","contentType":"directory"},{"name":"vim-interaction","path":"plugins/vim-interaction","contentType":"directory"},{"name":"virtualenv","path":"plugins/virtualenv","contentType":"directory"},{"name":"virtualenvwrapper","path":"plugins/virtualenvwrapper","contentType":"directory"},{"name":"volta","path":"plugins/volta","contentType":"directory"},{"name":"vscode","path":"plugins/vscode","contentType":"directory"},{"name":"vundle","path":"plugins/vundle","contentType":"directory"},{"name":"wakeonlan","path":"plugins/wakeonlan","contentType":"directory"},{"name":"watson","path":"plugins/watson","contentType":"directory"},{"name":"wd","path":"plugins/wd","contentType":"directory"},{"name":"web-search","path":"plugins/web-search","contentType":"directory"},{"name":"wp-cli","path":"plugins/wp-cli","contentType":"directory"},{"name":"xcode","path":"plugins/xcode","contentType":"directory"},{"name":"yarn","path":"plugins/yarn","contentType":"directory"},{"name":"yii","path":"plugins/yii","contentType":"directory"},{"name":"yii2","path":"plugins/yii2","contentType":"directory"},{"name":"yum","path":"plugins/yum","contentType":"directory"},{"name":"z","path":"plugins/z","contentType":"directory"},{"name":"zbell","path":"plugins/zbell","contentType":"directory"},{"name":"zeus","path":"plugins/zeus","contentType":"directory"},{"name":"zoxide","path":"plugins/zoxide","contentType":"directory"},{"name":"zsh-interactive-cd","path":"plugins/zsh-interactive-cd","contentType":"directory"},{"name":"zsh-navigation-tools","path":"plugins/zsh-navigation-tools","contentType":"directory"}],"totalCount":324},"":{"items":[{"name":".github","path":".github","contentType":"directory"},{"name":"cache","path":"cache","contentType":"directory"},{"name":"custom","path":"custom","contentType":"directory"},{"name":"lib","path":"lib","contentType":"directory"},{"name":"log","path":"log","contentType":"directory"},{"name":"plugins","path":"plugins","contentType":"directory"},{"name":"templates","path":"templates","contentType":"directory"},{"name":"themes","path":"themes","contentType":"directory"},{"name":"tools","path":"tools","contentType":"directory"},{"name":".editorconfig","path":".editorconfig","contentType":"file"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":".gitpod.Dockerfile","path":".gitpod.Dockerfile","contentType":"file"},{"name":".gitpod.yml","path":".gitpod.yml","contentType":"file"},{"name":".prettierrc","path":".prettierrc","contentType":"file"},{"name":"CODE_OF_CONDUCT.md","path":"CODE_OF_CONDUCT.md","contentType":"file"},{"name":"CONTRIBUTING.md","path":"CONTRIBUTING.md","contentType":"file"},{"name":"LICENSE.txt","path":"LICENSE.txt","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"SECURITY.md","path":"SECURITY.md","contentType":"file"},{"name":"oh-my-zsh.sh","path":"oh-my-zsh.sh","contentType":"file"}],"totalCount":20}},"fileTreeProcessingTime":32.875225,"foldersToFetch":[],"reducedMotionEnabled":"system","repo":{"id":291137,"defaultBranch":"master","name":"ohmyzsh","ownerLogin":"ohmyzsh","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2009-08-28T14:15:37.000-04:00","ownerAvatar":"https://avatars.githubusercontent.com/u/22552083?v=4","public":true,"private":false,"isOrgOwned":true},"refInfo":{"name":"master","listCacheKey":"v0:1671191229.813618","canEdit":true,"refType":"branch","currentOid":"8bdb5c959c9a5c74d3b59c05a3a0bca5e602c3cd"},"path":"plugins/docker-compose/_docker-compose","currentUser":{"id":6454764,"login":"OpnSrcConstruction","userEmail":"opensourceconstruction@gmail.com"},"blob":{"rawLines":["#compdef docker-compose","","# Description","# -----------","#  zsh completion for docker-compose","# -------------------------------------------------------------------------","# Authors","# -------","#  * Steve Durrheimer <s.durrheimer@gmail.com>","# -------------------------------------------------------------------------","# Inspiration","# -----------","#  * @albers docker-compose bash completion script","#  * @felixr docker zsh completion script : https://github.com/felixr/docker-zsh-completion","# -------------------------------------------------------------------------","","__docker-compose_q() {","    docker-compose 2>/dev/null $compose_options \"$@\"","}","","# All services defined in docker-compose.yml","__docker-compose_all_services_in_compose_file() {","    local already_selected","    local -a services","    already_selected=$(echo $words | tr \" \" \"|\")","    __docker-compose_q ps --services \"$@\" \\","        | grep -Ev \"^(${already_selected})$\"","}","","# All services, even those without an existing container","__docker-compose_services_all() {","    [[ $PREFIX = -* ]] && return 1","    integer ret=1","    services=$(__docker-compose_all_services_in_compose_file \"$@\")","    _alternative \"args:services:($services)\" && ret=0","","    return ret","}","","# All services that are defined by a Dockerfile reference","__docker-compose_services_from_build() {","    [[ $PREFIX = -* ]] && return 1","    __docker-compose_services_all --filter source=build","}","","# All services that are defined by an image","__docker-compose_services_from_image() {","    [[ $PREFIX = -* ]] && return 1","    __docker-compose_services_all --filter source=image","}","","__docker-compose_pausedservices() {","    [[ $PREFIX = -* ]] && return 1","    __docker-compose_services_all --filter status=paused","}","","__docker-compose_stoppedservices() {","    [[ $PREFIX = -* ]] && return 1","    __docker-compose_services_all --filter status=stopped","}","","__docker-compose_runningservices() {","    [[ $PREFIX = -* ]] && return 1","    __docker-compose_services_all --filter status=running","}","","__docker-compose_services() {","    [[ $PREFIX = -* ]] && return 1","    __docker-compose_services_all","}","","__docker-compose_caching_policy() {","    oldp=( \"$1\"(Nmh+1) )            # 1 hour","    (( $#oldp ))","}","","__docker-compose_commands() {","    local cache_policy","","    zstyle -s \":completion:${curcontext}:\" cache-policy cache_policy","    if [[ -z \"$cache_policy\" ]]; then","        zstyle \":completion:${curcontext}:\" cache-policy __docker-compose_caching_policy","    fi","","    if ( [[ ${+_docker_compose_subcommands} -eq 0 ]] || _cache_invalid docker_compose_subcommands) \\","        && ! _retrieve_cache docker_compose_subcommands;","    then","        local -a lines","        lines=(${(f)\"$(_call_program commands docker-compose 2>&1)\"})","        _docker_compose_subcommands=(${${${lines[$((${lines[(i)Commands:]} + 1)),${lines[(I)  *]}]}## #}/ ##/:})","        (( $#_docker_compose_subcommands > 0 )) && _store_cache docker_compose_subcommands _docker_compose_subcommands","    fi","    _describe -t docker-compose-commands \"docker-compose command\" _docker_compose_subcommands","}","","__docker-compose_subcommand() {","    local opts_help opts_force_recreate opts_no_recreate opts_no_build opts_remove_orphans opts_timeout opts_no_color opts_no_deps","","    opts_help='(: -)--help[Print usage]'","    opts_force_recreate=\"(--no-recreate)--force-recreate[Recreate containers even if their configuration and image haven't changed. Incompatible with --no-recreate.]\"","    opts_no_recreate=\"(--force-recreate)--no-recreate[If containers already exist, don't recreate them. Incompatible with --force-recreate.]\"","    opts_no_build=\"(--build)--no-build[Don't build an image, even if it's missing.]\"","    opts_remove_orphans=\"--remove-orphans[Remove containers for services not defined in the Compose file]\"","    opts_timeout=('(-t --timeout)'{-t,--timeout}\"[Specify a shutdown timeout in seconds. (default: 10)]:seconds: \")","    opts_no_color='--no-color[Produce monochrome output.]'","    opts_no_deps=\"--no-deps[Don't start linked services.]\"","","    integer ret=1","","    case \"$words[1]\" in","        (build)","            _arguments \\","                $opts_help \\","                \"*--build-arg=[Set build-time variables for one service.]:<varname>=<value>: \" \\","                '--force-rm[Always remove intermediate containers.]' \\","                '(--quiet -q)'{--quiet,-q}'[Curb build output]' \\","                '(--memory -m)'{--memory,-m}'[Memory limit for the build container.]' \\","                '--no-cache[Do not use cache when building the image.]' \\","                '--pull[Always attempt to pull a newer version of the image.]' \\","                '--compress[Compress the build context using gzip.]' \\","                '--parallel[Build images in parallel.]' \\","                '*:services:__docker-compose_services_from_build' && ret=0","            ;;","        (config)","            _arguments \\","                $opts_help \\","                '(--quiet -q)'{--quiet,-q}\"[Only validate the configuration, don't print anything.]\" \\","                '--resolve-image-digests[Pin image tags to digests.]' \\","                '--services[Print the service names, one per line.]' \\","                '--volumes[Print the volume names, one per line.]' \\","                '--hash[Print the service config hash, one per line. Set \"service1,service2\" for a list of specified services.]' \\ && ret=0","            ;;","        (create)","            _arguments \\","                $opts_help \\","                $opts_force_recreate \\","                $opts_no_recreate \\","                $opts_no_build \\","                \"(--no-build)--build[Build images before creating containers.]\" \\","                '*:services:__docker-compose_services' && ret=0","            ;;","        (down)","            _arguments \\","                $opts_help \\","                $opts_timeout \\","                \"--rmi[Remove images. Type must be one of: 'all': Remove all images used by any service. 'local': Remove only images that don't have a custom tag set by the \\`image\\` field.]:type:(all local)\" \\","                '(-v --volumes)'{-v,--volumes}\"[Remove named volumes declared in the \\`volumes\\` section of the Compose file and anonymous volumes attached to containers.]\" \\","                $opts_remove_orphans && ret=0","            ;;","        (events)","            _arguments \\","                $opts_help \\","                '--json[Output events as a stream of json objects]' \\","                '*:services:__docker-compose_services' && ret=0","            ;;","        (exec)","            _arguments \\","                $opts_help \\","                '-d[Detached mode: Run command in the background.]' \\","                '--privileged[Give extended privileges to the process.]' \\","                '(-u --user)'{-u,--user=}'[Run the command as this user.]:username:_users' \\","                '-T[Disable pseudo-tty allocation. By default `docker-compose exec` allocates a TTY.]' \\","                '--index=[Index of the container if there are multiple instances of a service \\[default: 1\\]]:index: ' \\","                '*'{-e,--env}'[KEY=VAL Set an environment variable (can be used multiple times)]:environment variable KEY=VAL: ' \\","                '(-w --workdir)'{-w,--workdir=}'[Working directory inside the container]:workdir: ' \\","                '(-):running services:__docker-compose_runningservices' \\","                '(-):command: _command_names -e' \\","                '*::arguments: _normal' && ret=0","            ;;","        (help)","            _arguments ':subcommand:__docker-compose_commands' && ret=0","            ;;","    (images)","        _arguments \\","        $opts_help \\","        '-q[Only display IDs]' \\","        '*:services:__docker-compose_services' && ret=0","        ;;","        (kill)","            _arguments \\","                $opts_help \\","                '-s[SIGNAL to send to the container. Default signal is SIGKILL.]:signal:_signals' \\","                '*:running services:__docker-compose_runningservices' && ret=0","            ;;","        (logs)","            _arguments \\","                $opts_help \\","                '(-f --follow)'{-f,--follow}'[Follow log output]' \\","                $opts_no_color \\","                '--tail=[Number of lines to show from the end of the logs for each container.]:number of lines: ' \\","                '(-t --timestamps)'{-t,--timestamps}'[Show timestamps]' \\","                '*:services:__docker-compose_services' && ret=0","            ;;","        (pause)","            _arguments \\","                $opts_help \\","                '*:running services:__docker-compose_runningservices' && ret=0","            ;;","        (port)","            _arguments \\","                $opts_help \\","                '--protocol=[tcp or udp \\[default: tcp\\]]:protocol:(tcp udp)' \\","                '--index=[index of the container if there are multiple instances of a service \\[default: 1\\]]:index: ' \\","                '1:running services:__docker-compose_runningservices' \\","                '2:port:_ports' && ret=0","            ;;","        (ps)","            _arguments \\","                $opts_help \\","                '-q[Only display IDs]' \\","                '--filter KEY=VAL[Filter services by a property]:<filtername>=<value>:' \\","                '*:services:__docker-compose_services' && ret=0","            ;;","        (pull)","            _arguments \\","                $opts_help \\","                '--ignore-pull-failures[Pull what it can and ignores images with pull failures.]' \\","                '--no-parallel[Disable parallel pulling]' \\","                '(-q --quiet)'{-q,--quiet}'[Pull without printing progress information]' \\","                '--include-deps[Also pull services declared as dependencies]' \\","                '*:services:__docker-compose_services_from_image' && ret=0","            ;;","        (push)","            _arguments \\","                $opts_help \\","                '--ignore-push-failures[Push what it can and ignores images with push failures.]' \\","                '*:services:__docker-compose_services' && ret=0","            ;;","        (rm)","            _arguments \\","                $opts_help \\","                '(-f --force)'{-f,--force}\"[Don't ask to confirm removal]\" \\","                '-v[Remove any anonymous volumes attached to containers]' \\","                '*:stopped services:__docker-compose_stoppedservices' && ret=0","            ;;","        (run)","            _arguments \\","                $opts_help \\","                $opts_no_deps \\","                '-d[Detached mode: Run container in the background, print new container name.]' \\","                '*-e[KEY=VAL Set an environment variable (can be used multiple times)]:environment variable KEY=VAL: ' \\","                '*'{-l,--label}'[KEY=VAL Add or override a label (can be used multiple times)]:label KEY=VAL: ' \\","                '--entrypoint[Overwrite the entrypoint of the image.]:entry point: ' \\","                '--name=[Assign a name to the container]:name: ' \\","                '(-p --publish)'{-p,--publish=}\"[Publish a container's port(s) to the host]\" \\","                '--rm[Remove container after run. Ignored in detached mode.]' \\","                \"--service-ports[Run command with the service's ports enabled and mapped to the host.]\" \\","                '-T[Disable pseudo-tty allocation. By default `docker-compose run` allocates a TTY.]' \\","                '(-u --user)'{-u,--user=}'[Run as specified username or uid]:username or uid:_users' \\","                '(-v --volume)*'{-v,--volume=}'[Bind mount a volume]:volume: ' \\","                '(-w --workdir)'{-w,--workdir=}'[Working directory inside the container]:workdir: ' \\","                \"--use-aliases[Use the services network aliases in the network(s) the container connects to]\" \\","                '(-):services:__docker-compose_services' \\","                '(-):command: _command_names -e' \\","                '*::arguments: _normal' && ret=0","            ;;","        (scale)","            _arguments \\","                $opts_help \\","                $opts_timeout \\","                '*:running services:__docker-compose_runningservices' && ret=0","            ;;","        (start)","            _arguments \\","                $opts_help \\","                '*:stopped services:__docker-compose_stoppedservices' && ret=0","            ;;","        (stop|restart)","            _arguments \\","                $opts_help \\","                $opts_timeout \\","                '*:running services:__docker-compose_runningservices' && ret=0","            ;;","        (top)","            _arguments \\","                $opts_help \\","                '*:running services:__docker-compose_runningservices' && ret=0","            ;;","        (unpause)","            _arguments \\","                $opts_help \\","                '*:paused services:__docker-compose_pausedservices' && ret=0","            ;;","        (up)","            _arguments \\","                $opts_help \\","                '(--abort-on-container-exit)-d[Detached mode: Run containers in the background, print new container names. Incompatible with --abort-on-container-exit and --attach-dependencies.]' \\","                $opts_no_color \\","                $opts_no_deps \\","                $opts_force_recreate \\","                $opts_no_recreate \\","                $opts_no_build \\","                \"(--no-build)--build[Build images before starting containers.]\" \\","                \"(-d)--abort-on-container-exit[Stops all containers if any container was stopped. Incompatible with -d.]\" \\","                \"(-d)--attach-dependencies[Attach to dependent containers. Incompatible with -d.]\" \\","                '(-t --timeout)'{-t,--timeout}\"[Use this timeout in seconds for container shutdown when attached or when containers are already running. (default: 10)]:seconds: \" \\","                '--scale[SERVICE=NUM Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present.]:service scale SERVICE=NUM: ' \\","                '--exit-code-from=[Return the exit code of the selected service container. Implies --abort-on-container-exit]:service:__docker-compose_services' \\","                $opts_remove_orphans \\","                '*:services:__docker-compose_services' && ret=0","            ;;","        (version)","            _arguments \\","                $opts_help \\","                \"--short[Shows only Compose's version number.]\" && ret=0","            ;;","        (*)","            _message 'Unknown sub command' && ret=1","            ;;","    esac","","    return ret","}","","_docker-compose() {","    # Support for subservices, which allows for `compdef _docker docker-shell=_docker_containers`.","    # Based on /usr/share/zsh/functions/Completion/Unix/_git without support for `ret`.","    if [[ $service != docker-compose ]]; then","        _call_function - _$service","        return","    fi","","    local curcontext=\"$curcontext\" state line","    integer ret=1","    typeset -A opt_args","","    local file_description","","    if [[ -n ${words[(r)-f]} || -n ${words[(r)--file]} ]] ; then","        file_description=\"Specify an override docker-compose file (default: docker-compose.override.yml)\"","    else","        file_description=\"Specify an alternate docker-compose file (default: docker-compose.yml)\"","    fi","","    _arguments -C \\","        '(- :)'{-h,--help}'[Get help]' \\","        '*'{-f,--file}\"[${file_description}]:file:_files -g '*.yml'\" \\","        '(-p --project-name)'{-p,--project-name}'[Specify an alternate project name (default: directory name)]:project name:' \\","        '--env-file[Specify an alternate environment file (default: .env)]:env-file:_files' \\","        \"--compatibility[If set, Compose will attempt to convert keys in v3 files to their non-Swarm equivalent]\" \\","        '(- :)'{-v,--version}'[Print version and exit]' \\","        '--verbose[Show more output]' \\","        '--log-level=[Set log level]:level:(DEBUG INFO WARNING ERROR CRITICAL)' \\","        '--no-ansi[Do not print ANSI control characters]' \\","        '--ansi=[Control when to print ANSI control characters]:when:(never always auto)' \\","        '(-H --host)'{-H,--host}'[Daemon socket to connect to]:host:' \\","        '--tls[Use TLS; implied by --tlsverify]' \\","        '--tlscacert=[Trust certs signed only by this CA]:ca path:' \\","        '--tlscert=[Path to TLS certificate file]:client cert path:' \\","        '--tlskey=[Path to TLS key file]:tls key path:' \\","        '--tlsverify[Use TLS and verify the remote]' \\","        \"--skip-hostname-check[Don't check the daemon's hostname against the name specified in the client certificate (for example if your docker host is an IP address)]\" \\","        '(-): :->command' \\","        '(-)*:: :->option-or-argument' && ret=0","","    local -a relevant_compose_flags relevant_compose_repeatable_flags relevant_docker_flags compose_options docker_options","","    relevant_compose_flags=(","        \"--env-file\"","        \"--file\" \"-f\"","        \"--host\" \"-H\"","        \"--project-name\" \"-p\"","        \"--tls\"","        \"--tlscacert\"","        \"--tlscert\"","        \"--tlskey\"","        \"--tlsverify\"","        \"--skip-hostname-check\"","    )","","    relevant_compose_repeatable_flags=(","        \"--file\" \"-f\"","    )","","    relevant_docker_flags=(","        \"--host\" \"-H\"","        \"--tls\"","        \"--tlscacert\"","        \"--tlscert\"","        \"--tlskey\"","        \"--tlsverify\"","    )","","    for k in \"${(@k)opt_args}\"; do","        if [[ -n \"${relevant_docker_flags[(r)$k]}\" ]]; then","            docker_options+=$k","            if [[ -n \"$opt_args[$k]\" ]]; then","                docker_options+=$opt_args[$k]","            fi","        fi","        if [[ -n \"${relevant_compose_flags[(r)$k]}\" ]]; then","            if [[ -n \"${relevant_compose_repeatable_flags[(r)$k]}\"  ]]; then","                values=(\"${(@s/:/)opt_args[$k]}\")","                for value in $values","                do","                    compose_options+=$k","                    compose_options+=$value","                done","            else","                compose_options+=$k","                if [[ -n \"$opt_args[$k]\" ]]; then","                    compose_options+=$opt_args[$k]","                fi","            fi","        fi","    done","","    case $state in","        (command)","            __docker-compose_commands && ret=0","            ;;","        (option-or-argument)","            curcontext=${curcontext%:*:*}:docker-compose-$words[1]:","            __docker-compose_subcommand && ret=0","            ;;","    esac","","    return ret","}","","_docker-compose \"$@\""],"stylingDirectivescsv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/ohmyzsh/ohmyzsh/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":false,"repoAlertsPath":"/ohmyzsh/ohmyzsh/security/dependabot","repoSecurityAndAnalysisPath":"/ohmyzsh/ohmyzsh/settings/security_analysis","repoOwnerIsOrg":true,"currentUserCanAdminRepo":false},"displayName":"_docker-compose","displayUrl":"https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker-compose/_docker-compose?raw=true","headerInfo":{"blobSize":"17.7 KB","deleteInfo":{"deletePath":"https://github.com/ohmyzsh/ohmyzsh/delete/master/plugins/docker-compose/_docker-compose","deleteTooltip":"Delete the file in your fork of this project"},"editInfo":{"editTooltip":"Edit the file in your fork of this project"},"ghDesktopPath":"x-github-client://openRepo/https://github.com/ohmyzsh/ohmyzsh?branch=master&filepath=plugins%2Fdocker-compose%2F_docker-compose","gitLfsPath":null,"onBranch":true,"shortPath":"c6b7335","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh%2Fblob%2Fmaster%2Fplugins%2Fdocker-compose%2F_docker-compose","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"421","truncatedSloc":"388"},"mode":"file"},"image":false,"isCodeownersFile":null,"isValidLegacyIssueTemplate":false,"issueTemplateHelpUrl":"https://docs.github.com/articles/about-issue-and-pull-request-templates","issueTemplate":null,"discussionTemplate":null,"language":null,"large":false,"loggedIn":true,"newDiscussionPath":"/ohmyzsh/ohmyzsh/discussions/new","newIssuePath":"/ohmyzsh/ohmyzsh/issues/new","planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/ohmyzsh/ohmyzsh/blob/master/plugins/docker-compose/_docker-compose","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","dismissStackNoticePath":"/settings/dismiss-notice/publish_stack_from_file","releasePath":"/ohmyzsh/ohmyzsh/releases/new?marketplace=true","showPublishActionBanner":false,"showPublishStackBanner":false},"renderImageOrRaw":false,"richText":null,"renderedFileInfo":null,"tabSize":2,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"repoOwner":"ohmyzsh","repoName":"ohmyzsh","showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","showDependabotConfigurationBanner":false,"actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timedOut":false,"notAnalyzed":false,"symbols":[]}},"copilotUserAccess":{"canModifyCopilotSettings":false,"canViewCopilotSettings":false,"accessAllowed":false,"hasCFIAccess":true,"hasSubscriptionEnded":false,"business":null},"csrf_tokens":{"/ohmyzsh/ohmyzsh/branches":{"post":"J7es4nI1sXyCxTB_5VU4-Cjuc3EuY_fTuYU5sob0zyuun5v1OPGLtFAOuQGRR5DVivaVQKuEuLxXS1riZIFVWw"}}},"title":"ohmyzsh/plugins/docker-compose/_docker-compose at master · ohmyzsh/ohmyzsh","locale":"en"}